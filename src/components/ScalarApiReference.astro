---
interface Props {
  specURL: string;
  proxyURL?: string;
}

const {specURL, proxyURL = import.meta.env.PUBLIC_KINDE_PROXY_URL} = Astro.props;
---

<script
  id="api-reference"
  data-url={specURL}
  data-proxy-url={proxyURL}
  data-configuration='{"theme": "deepSpace", "hideDarkModeToggle": "true", "searchHotKey": "j"}'
></script>
<script
  src="https://cdn.jsdelivr.net/npm/@scalar/api-reference@1.23.5/dist/browser/standalone.min.js"
></script>

<script>
  import waitForElement from "@utils/waitForElement";

  // Function to update the URL based on input changes
  function updateURL(subdomain: string, token: string) {
    // Get the current URL
    const url = new URL(window.location.href as any);

    // Set the new values for 'subdomain' and 'token'
    url.searchParams.set("subdomain", subdomain);
    url.searchParams.set("token", token);

    // Update the URL in the browser without reloading the page
    window.history.replaceState({}, "", url);
  }

  // Wait for subdomain input to be ready, then focus and select text on focus, making it easier for users to enter their Kinde subdomain
  waitForElement("#variable-subdomain", (inputElement: HTMLInputElement) => {

    inputElement.addEventListener("focus", () => {
      inputElement.select();
    });

    inputElement.addEventListener("mouseup", (e) => {
      e.preventDefault();
    });

  });

  waitForElement('.authentication-content label', (element: HTMLLabelElement) => {

    if (window.location.pathname.includes('management')) {
      element.textContent = "M2M Token"
    }

    if (window.location.pathname.includes('frontend')) {
      element.textContent = "User access token"
    }

    const authenticationLabel = document.querySelector('.security-scheme-label') as HTMLDivElement;

    authenticationLabel.textContent = "Authentication"
  })

  waitForElement(".introduction-card", (parentEl: HTMLDivElement) => {

    const subdomainInputElement = parentEl.querySelector(
      "input#variable-subdomain"
    ) as HTMLInputElement;
    const tokenInputElement = parentEl.querySelector(
      ".authentication-content input"
    ) as HTMLInputElement;
    const urlParams = new URL(window.location.href);
    const subdomain = urlParams.searchParams.get("subdomain");
    const token = urlParams.searchParams.get("token");

    subdomainInputElement.value = subdomain as string;

    subdomainInputElement.addEventListener("input", (event: Event) => {
      const subdomain = (event.target as HTMLInputElement).value;
      const token = tokenInputElement.value;
      updateURL(subdomain, token);
    });

    subdomainInputElement.dispatchEvent(new Event("input"));

    tokenInputElement.value = token as string;

    tokenInputElement.addEventListener("input", (event) => {
      const subdomain = subdomainInputElement.value;
      const token = (event.target as HTMLInputElement).value;
      updateURL(subdomain, token);
    });

    tokenInputElement.dispatchEvent(new Event("input"));

  });

  // Detect when api client overlay is up, so we can add a class to the body and then control body overflow, header z-index and position (from fixed to static)
  const observer = new MutationObserver((mutationsList) => {
    mutationsList.forEach((mutation) => {
      mutation.addedNodes.forEach((node: any) => {
        if (node.nodeType === 1 && node.classList.contains("api-client-drawer")) {
          document.body?.classList.add("api-client-drawer-open");
        }
      });

      mutation.removedNodes.forEach((node: any) => {
        if (node.nodeType === 1 && node.classList.contains("api-client-drawer")) {
          document.body?.classList.remove("api-client-drawer-open");
        }
      });
    });
  });

  // Start observing for when the .api-client-drawer is added/removed from the DOM tree
  observer.observe(document.body, {childList: true, subtree: true});
</script>

<style is:inline>

  :root {
    --kinde-header-height: 72px;
    --spacer: 16px;
  } 

  html,
  body {
    background-color: transparent;
  }

  body.api-client-drawer-open {
    overflow: hidden;
  }

  body.api-client-drawer-open header.header {
    position: static;
    z-index: 0;
  }

  body.api-client-drawer-open .main-frame {
    padding-top: 0;
  }

  main .content-panel {
    padding: 0;
  }

  main .content-panel .sl-container {
    margin-inline: 0;
    min-width: 100%;
  }

  main :global(.scalar-api-reference) {
    width: 100% !important;
  }

  span.sidebar-search-placeholder::after {
    content: " API";
  }

  p.sidebar-heading-link-title {
    font-size: 13px;
  }

  .kinde-header {
    background-color: var(--scalar-background-1);
    border-block-end: 1px solid var(--scalar-scrollbar-color);
    max-width: 100%;
    display: flex;
    padding-inline: 18px;
    min-height: var(--kinde-header-height);
    align-items: center;
    justify-content: space-between;
    position: fixed;
    inset-block-start: 0;
    inset-inline: 0;
    z-index: 10;
    overflow: hidden;
  }

  .input:has(input#variable-subdomain:placeholder-shown),
  .authentication-content .card-form-input:has(input:placeholder-shown) {
    animation: pulse 1.2s linear infinite;
  }

  .sidebar-pages {
    max-height: calc(100vh - (var(--kinde-header-height) + var(--spacer)));
  }

  .sidebar-heading-type {
    font-weight: normal !important;
  }

  .sidebar-heading-link-title {
    line-height: 1.5rem !important;
  }

  h1.section-header.tight {
    font-size: clamp(38px, 2.75vw + 16px, 56px);
    letter-spacing: -0.03em;
    line-height: 1.2;
    margin-block: 16px !important;
  }

  h2.section-header .label {
    font-size: 32px;
    letter-spacing: -0.03em;
  }

  .kinde-header ul {
    align-items: center;
    display: flex;
    list-style-type: none;
    gap: 24px;
  }

  .kinde-header ul li a {
    font-family: "Inter", sans-serif;
    text-decoration: none;
    color: var(--scalar-color-1);
    background-color: transparent;
    letter-spacing: normal;
    font-weight: 400;
    border-radius: 8px;
    transition: background-color 0.3s ease;
  }

  .kinde-header ul li a.button {
    background-color: var(--scalar-color-1);
    color: var(--scalar-background-1);
    padding: 12px 16px;
  }

  .kinde-header ul li a.button:hover {
    background-color: var(--scalar-button-1-hover);
  }

  .scalar-api-client__item__options::after {
    content: "M2M token";
    font-size: var(--scalar-mini);
    font-weight: var(--scalar-semibold);
  }

  .management-api .scalar-api-client__item__options::after {
    content: "M2M token";
  }

  .frontend-api .scalar-api-client__item__options::after {
    content: "User access token";
  }

  .scalar-api-client__item__options .security-scheme-label,
  .scalar-api-client__item__content .card-form-input label {
    display: none;
  }

  .darklight-reference-promo {
    display: none !important;
  }

  button.darklight {
    padding-bottom: 18px !important;
    padding-block-end: 18px !important;
  }

  div#description\/intro {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
    top: 0;
  }

  div#description\/prerequisites {
    margin-block: 24px;
    scroll-margin-top: calc(var(--kinde-header-height) + var(--spacer));
  }

  div#description\/prerequisites .markdown h2 {
    display: inline;
    color: var(--scalar-background-1);
    background-color: var(--scalar-color-1);
    padding: 0.25em 0.5em;
    border-radius: 0.3em;
  }

  div#description\/prerequisites .markdown ol {
    max-width: 48ch;
    margin-block-start: 1.5rem !important;
  }

  .endpoint-description .markdown > div {
    display: flex;
    margin-block-start: 24px !important;
    position: relative;
    padding-top: 48px;
    flex-wrap: wrap;
    gap: 10px;
  }

  .endpoint-description .markdown > div > code {
    margin: 0 !important;
    font-family: var(--scalar-font-code) !important;
    background-color: var(--scalar-color-1) !important;
    box-shadow: none !important;
    font-size: var(--scalar-micro) !important;
    border-radius: 0.3em !important;
    padding: 0.4em !important;
    color: var(--scalar-background-1) !important;
    line-height: 1;
  }

  .endpoint-description .markdown > div::before {
    content: "Scopes";
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--scalar-border-color);
    font-size: var(--scalar-heading-4);
    font-weight: var(--scalar-semibold);
    color: var(--scalar-color-1);
    line-height: 1.45;
    width: 100%;
  }

  .sl-markdown-content aside.references-navigation {
    padding: 0;
    border: none;
  }

  @media (min-width: 768px) {
    .api-client-drawer {
      width: calc(100vw - 80px) !important;
    }
  }

  @media (min-width: 1001px) {
    .kinde-header {
      background-color: rgba(255, 255, 255, 0.7);
      backdrop-filter: blur(20px);
    }

    .dark-mode .kinde-header {
      background-color: rgba(0, 0, 0, 0.2);
    }
  }

  @media (min-width: 1540px) {
    .api-client-drawer {
      width: calc(100vw - 120px) !important;
    }
  }

  @keyframes pulse {
    50% {
      background-color: hsl(42.81deg 100% 65.1% / 12%);
      outline: 1px solid var(--scalar-color-orange);
    }
    0%,
    100% {
      background-color: hsl(42.81deg 100% 65.1% / 3%);
      outline: 1px solid var(--scalar-color-yellow);
    }
  }

</style>
