---
import Default from "@astrojs/starlight/components/Footer.astro";
import type { Props } from "@astrojs/starlight/props";
import ArticleFeedback from "@components/ArticleFeedback.astro";
import FooterCards from "@components/FooterCards.astro";
import ImageZoom from "@components/ImageZoom.astro";
import Inkeep from "@components/Inkeep.astro";
import RelatedArticles, { type RelatedArticle } from "@components/RelatedArticles.astro";
import { getCollection } from "astro:content";
const {entry} = Astro.props;

let relatedArticles: RelatedArticle[] = [];

function findLabelByHref(entries: any, href: string) {
  let result = null;

  function search(entries: any, href: any) {
    for (const entry of entries) {
      if (entry.type === "group") {
        const found = search(entry.entries, href);
        if (found) {
          // If the target is found in a deeper level, return the label of the current group
          return entry.label;
        }
      } else if (entry.type === "link" && entry.href === href) {
        // If the target is found, return true to signal the calling context
        return true;
      }
    }
    // Return null if nothing is found at the current level
    return null;
  }

  // Start the recursive search from the root entries
  result = search(entries, href);

  return result;
}

if (entry.data.relatedArticles) {
  for (const articleId of entry.data?.relatedArticles) {
    await getCollection("docs", (entry) => {
      if (articleId === entry.data.page_id) {
        relatedArticles.push({
          title: entry.data.title,
          link: entry.id,
          order: entry.data.sidebar.order as number,
          topic: findLabelByHref(Astro.props.sidebar, "/" + entry.id + "/")
        });
      }
    });
  }
}
---

{
  entry.data.template == "doc" && (
    <>
      <section>
        <ArticleFeedback />
        {entry.data.relatedArticles && <RelatedArticles articles={relatedArticles} />}
      </section>
      <Default {...Astro.props}>
        <slot />
      </Default>
      <FooterCards showOnlyTwoCards />
      <ImageZoom />
    </>
  )
}

<Inkeep />

<script is:inline>
  // This will make sure the current page link in the right sidebar will be in view even when the navigation started via a search result link or a referrer other than the docs. It will also ensure that the main topic details element is open.
  const isReferredFromInternalLink = document.referrer.includes(window.location.origin);

  if (!isReferredFromInternalLink) {
    const currentLinkMainTopicDetailsEl = document.querySelector(
      '#starlight__sidebar details:has(a[aria-current="page"])'
    );
    const currentPageLink = document.querySelector('#starlight__sidebar a[aria-current="page"]');

    if (currentPageLink) {
      currentLinkMainTopicDetailsEl.setAttribute("open", "true");
      currentPageLink.scrollIntoView({
        behavior: "instant",
        block: "center"
      });
    }
  }
</script>

<script is:inline>
  // This will ensure we don't loose utm tags when navigating between our sites and hs meetings
  const searchParams = new URLSearchParams(window.location.search);

  // List of domains we want to transfer the utm tags to
  const domainsToDecorate = [
    window.location.origin,
    "https://kinde.com",
    "https://app.kinde.com",
    "https://meetings.hubspot.com"
  ];
  // We are specific about what tags we need to track. Any tags not included here will be ignored.
  const queryParams = ["utm_source", "utm_medium", "utm_campaign", "utm_term", "utm_content"];

  const appendQueryParams = (url, collectedQueryParams) => {
    const delimeter = url.indexOf("?") === -1 ? "?" : "&";
    return url + delimeter + collectedQueryParams.join("&");
  };

  // Collect all valid query params
  const collectedQueryParams = queryParams.reduce((collectedParams, paramName) => {
    const paramValue = searchParams.get(paramName);
    if (paramValue) {
      collectedParams.push(paramName + "=" + paramValue);
    }
    return collectedParams;
  }, []);

  // If we have valid query params collected, then get all the links that include our domains to decorate
  if (collectedQueryParams.length) {
    const links = document.querySelectorAll("a");

    links.forEach((link) => {
      domainsToDecorate.forEach((domain) => {
        if (link.href.indexOf(domain) > -1 && link.href.indexOf("#") === -1) {
          link.href = appendQueryParams(link.href, collectedQueryParams);
        }
      });
    });
  }
</script>
